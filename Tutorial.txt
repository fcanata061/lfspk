===========================================================
 MANUAL COMPLETO DO LFSPKG
===========================================================

Autor: Você
Objetivo: Gerenciador de pacotes minimalista e funcional
para Linux From Scratch, escrito em Go.

===========================================================
 1. ESTRUTURA DE DIRETÓRIOS
===========================================================

O lfspkg utiliza variáveis de ambiente para organizar a
instalação, compilação e gerenciamento de pacotes:

$LFSPKG_ROOT   -> raiz de trabalho do gerenciador
                 (default: /var/lfspkg)

$BIN           -> diretório final dos binários e libs
                 (default: /usr)

$SOURCES       -> onde as fontes são baixadas e extraídas
                 (default: $LFSPKG_ROOT/sources)

$CACHE         -> onde ficam os tarballs baixados e pacotes
                 empacotados
                 (default: $LFSPKG_ROOT/cache)

$MANIFESTS     -> manifestos de instalação
                 (default: $LFSPKG_ROOT/manifests)

$REPO          -> repositório de receitas (subpastas por
                 categoria, ex: core, libs, browser)

===========================================================
 2. COMANDOS PRINCIPAIS DO LFSPKG
===========================================================

./lfspkg fetch <pkg>        -> baixa apenas o source
./lfspkg extract <pkg>      -> extrai o source
./lfspkg patch <pkg>        -> aplica patches
./lfspkg prepare <pkg>      -> roda etapa "prepare"
./lfspkg build <pkg>        -> compila e instala pacote
./lfspkg check <pkg>        -> roda testes do pacote
./lfspkg package <pkg>      -> cria tarball empacotado
./lfspkg install <pkg>      -> instala a partir do pacote
./lfspkg remove <pkg>       -> remove pacote instalado
./lfspkg query <pkg>        -> mostra informações do pacote
./lfspkg list               -> lista pacotes disponíveis
./lfspkg upgrade <pkg>      -> recompila e reinstala
./lfspkg search <nome>      -> procura receitas no $REPO

Opções CLI adicionais:
--only-fetch
--only-extract
--only-patch
--only-build
--only-install
--strip
--destdir <dir>

===========================================================
 3. COMO CONFIGURAR O LFSPKG
===========================================================

1. Baixe o código fonte (Go):
   git clone https://seu-repo/lfspkg.git
   cd lfspkg
   go build -o lfspkg

2. Crie diretórios principais:
   sudo mkdir -pv /var/lfspkg/{sources,cache,manifests,repo}
   sudo mkdir -pv /usr/local/lfspkg/bin

3. Exporte variáveis (coloque no ~/.bashrc):
   export LFSPKG_ROOT=/var/lfspkg
   export BIN=/usr
   export SOURCES=$LFSPKG_ROOT/sources
   export CACHE=$LFSPKG_ROOT/cache
   export MANIFESTS=$LFSPKG_ROOT/manifests
   export REPO=$LFSPKG_ROOT/repo

4. Teste:
   ./lfspkg list

===========================================================
 4. COMO USAR PARA TOOLCHAIN
===========================================================

O processo de construção de uma toolchain começa com o host.
Você pode compilar pacotes básicos em DESTDIR separado e depois
promover para o sistema final.

Exemplo:

./lfspkg build binutils --destdir=$LFSPKG_ROOT/toolchain
./lfspkg build gcc --destdir=$LFSPKG_ROOT/toolchain
./lfspkg build glibc --destdir=$LFSPKG_ROOT/toolchain

Depois, ajuste PATH:
export PATH=$LFSPKG_ROOT/toolchain/usr/bin:$PATH

Assim a toolchain compilada é usada para os próximos pacotes.

===========================================================
 5. EXEMPLOS DE RECEITAS
===========================================================

-----------------------------------------------------------
 A. GLIBC
-----------------------------------------------------------
{
  "name": "glibc",
  "version": "2.40",
  "description": "The GNU C Library",
  "homepage": "https://www.gnu.org/software/libc/",
  "license": "LGPL-2.1-or-later",
  "source": "https://ftp.gnu.org/gnu/libc/glibc-2.40.tar.xz",
  "sha256": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
  "dependencies": ["linux-headers"],
  "patches": [],
  "prepare": ["mkdir -p build"],
  "configure": ["cd build && ../configure --prefix=/usr --disable-werror"],
  "build": ["cd build && make -j$(nproc)"],
  "check": ["cd build && make check || true"],
  "install": ["cd build && make DESTDIR=$DESTDIR install"],
  "postinstall": [],
  "postremove": []
}

-----------------------------------------------------------
 B. GCC
-----------------------------------------------------------
{
  "name": "gcc",
  "version": "14.2.0",
  "description": "GNU Compiler Collection",
  "homepage": "https://gcc.gnu.org/",
  "license": "GPL-3.0-or-later",
  "source": "https://ftp.gnu.org/gnu/gcc/gcc-14.2.0/gcc-14.2.0.tar.xz",
  "sha256": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
  "dependencies": ["gmp","mpfr","mpc","isl"],
  "patches": [],
  "prepare": ["mkdir -p build"],
  "configure": [
    "cd build && ../configure --prefix=/usr --enable-languages=c,c++ --disable-multilib --disable-bootstrap --with-system-zlib"
  ],
  "build": ["cd build && make -j$(nproc)"],
  "check": ["cd build && make -k check || true"],
  "install": [
    "cd build && make DESTDIR=$DESTDIR install",
    "mv -v $DESTDIR/usr/libexec/gcc/*/*/liblto_plugin.so $DESTDIR/usr/lib/bfd-plugins/"
  ],
  "postinstall": ["ln -svf gcc $DESTDIR/usr/bin/cc"],
  "postremove": []
}

-----------------------------------------------------------
 C. BISON
-----------------------------------------------------------
{
  "name": "bison",
  "version": "3.8.2",
  "description": "GNU Bison parser generator",
  "homepage": "https://www.gnu.org/software/bison/",
  "license": "GPL-3.0-or-later",
  "source": "https://ftp.gnu.org/gnu/bison/bison-3.8.2.tar.xz",
  "sha256": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
  "dependencies": ["m4"],
  "patches": [],
  "prepare": [],
  "configure": ["./configure --prefix=/usr"],
  "build": ["make -j$(nproc)"],
  "check": ["make check || true"],
  "install": ["make DESTDIR=$DESTDIR install"],
  "postinstall": [],
  "postremove": []
}

===========================================================
 6. MODELO DE RECEITA COMPLETA
===========================================================

Este modelo contém todas as opções suportadas:

{
  "name": "example",
  "version": "1.0.0",
  "description": "Exemplo de pacote com todas opções",
  "homepage": "https://example.org",
  "license": "MIT",
  "source": "https://example.org/example-1.0.0.tar.gz",
  "sha256": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
  "dependencies": ["dep1","dep2"],
  "patches": ["fix-bug.patch"],
  "prepare": ["./autogen.sh"],
  "preconfig": ["echo Preconfig step"],
  "configure": ["./configure --prefix=/usr"],
  "build": ["make"],
  "check": ["make check"],
  "install": ["make DESTDIR=$DESTDIR install"],
  "postinstall": ["ldconfig"],
  "postremove": ["echo Removed example"],
  "hooks": {
    "post-remove": ["echo Hook pós remoção"]
  }
}

===========================================================
 7. USO PRÁTICO
===========================================================

1. Baixar fonte do pacote:
   ./lfspkg fetch bison

2. Extrair e aplicar patch:
   ./lfspkg extract bison
   ./lfspkg patch bison

3. Compilar:
   ./lfspkg build bison

4. Instalar:
   sudo ./lfspkg install bison

5. Listar pacotes instalados:
   ./lfspkg list

6. Buscar pacote no repo:
   ./lfspkg search gcc

7. Remover pacote:
   sudo ./lfspkg remove bison

===========================================================
 9. ABREVIATURAS SUPORTADAS NA CLI
===========================================================

Comando completo      Abreviaturas
-----------------------------------------------------------
fetch                 f, dl
extract               x, ex
patch                 p
prepare               pr
preconfig             pc
configure             c, conf
build                 b, mk
check                 t, test
install               i
installdest           id
remove                rm, un
query                 q, info
list                  ls
search                s
upgrade               up
package               pk, tar
graph                 g
sync                  sy, git


===========================================================
 8. OBSERVAÇÕES
===========================================================

- Sempre use DESTDIR quando estiver montando toolchain.
- Manifests garantem rastreabilidade dos arquivos instalados.
- É possível sincronizar o repositório com git para atualizar
  receitas.
- lfspkg suporta strip, só build, só patch, etc, para debug.
- Estrutura simples e extensível para qualquer source-based OS.

===========================================================
 FIM DO MANUAL
===========================================================
